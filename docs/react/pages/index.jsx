import { useState, useEffect, createRef, forwardRef } from 'react';
import Script from 'next/script';
import styles from '../style/style.module.css';
import { ORMJS_CountObjects, ORMJS_CreateEntity } from '../components/ormjsObjectObserver';
import { ORMJS_HighlightOnClick } from '../components/ormjsManipulator';

export default function Homepage() {

    const [likes, setLikes] = useState(0);
    const [zoomValue, setZoom] = useState("700");
    const [mountView, setMountView] = useState(true);
    let viewRef = createRef(null);

    function handleLikes() {
        setLikes(likes + 1);
    }

    function handleZoom() {
        const zval = document.getElementById("svgscale-ormjs").value;
        setZoom(zval);
    }

    return (
        <>

        <link rel="stylesheet" href="ormjs/ormjs.style.min.css" type="text/css" />
        <link rel="stylesheet" href="ormjs/d3-context-menu.css" type="text/css" />

        <Script
                src="ormjs/d3.v7.js"
                strategy="beforeInteractive"
                onLoad={() =>
                    console.log(`d3.v7.js loaded`)
                }
        />
        <Script
                src="ormjs/d3-context-menu.js"
                strategy="beforeInteractive"
                onLoad={() =>
                    console.log(`d3-context-menu.js loaded`)
                }
        />
        <Script
                src="ormjs/ormjs.min.js"
                strategy="beforeInteractive"
                onReady={() => {
                    console.log(`ormjs.min.js loaded`, viewRef.current.id);
                    //ORMJS_Model({grandparent: viewRef.current.id});
                }
                }
        />

        <div className={styles.appContainer}>
            <ORMView id="regionOrmjs" ref={viewRef} render={mountView} />
            <div className={styles.leftContainer}>

                <AppHeader title="React World" />
                <LikeButton onClick={handleLikes} likes={likes} />
                <div className={styles.divContainer}><h3 className={styles.body}>ORMJS Integration</h3>
                    <p>Examples of how we can integrate with ORMJS.</p>
                    <CodeRegion id="rel" />
                    <ZoomBar onChange={handleZoom} zoomValue={zoomValue} />
                    <ORMJS_CountObjects targetRef={viewRef}/>
                    <ORMJS_CreateEntity targetRef={viewRef}/>
                    <ORMJS_HighlightOnClick targetRef={viewRef}/>
                    <KillORMJSRegion state={mountView} setter={setMountView} />
                </div>

            </div>
        </div>
        </>
    )
}

const ORMView = forwardRef(({id, render}, ref) => {

    useEffect(() => {
        if (ref.current) { 
            ORMJS_Model({grandparent: ref.current.id}) 
        }
      }, [render]);
    if (render) {
        return (  
            <>
            <div id={id} ref={ref} className={styles.ormView}>
            <OJSHeader title="ORMJS World" />
            </div>
            </>
        )
    } else { 
        return (  
            <>
            </>
        ) 
    }
});

function AppHeader({title}) {
    return (<h1 className={styles.body}>{title ? title : 'Ship. ðŸš€'}</h1>)
}

function OJSHeader({title}) {
    return (<h1 className={styles.regionOrm}>{title ? title : 'Ship. ðŸš€'}</h1>)
}

function LikeButton({onClick, likes}) {
    return (
        <div className={styles.divContainer}>
            Unrelated event: <button onClick={onClick}>Likes ({likes})</button>
        </div>
    )
}

function ZoomBar({onChange, zoomValue}) {
    return (
        <div className={styles.divSubcontainer}>
            <h4 className={styles.body}>ORMJS uses onChange listener to read React component</h4>
            <p>This component illustrates how React components can be used to control ORMJS functionality.</p>
            <p>Zoom: <input type="range" id="svgscale-ormjs" onChange={onChange} min="100" max="1000" defaultValue={zoomValue} /></p>
        </div>
    )
}

function CodeRegion({id}) {
    return (
        <div className={styles.divSubcontainer}>
            <h4 className={styles.body}>ORMJS changes the inner html of this element</h4>
            <p>Code is generated by ORMJS. Element is generated by React component.</p>
            <p>This component illustrates how ORMJS features can be exposed via React components.</p>
            <div id={id} className={styles.regionCode}></div>
        </div>
    )
}

function KillORMJSRegion({state, setter}) {
    let button_text = "Unmount ORMJS Parent";
    function clickHandler() {
        state ? setter(false) : setter(true);
    }
    if (!state) {
        button_text = "Mount ORMJS Parent";
    }
    return (
    <div className={styles.divSubcontainer}>
        <h4 className={styles.body}>React component mounts / unmounts element containing ORMJS</h4>
        <p>This component illustrates how a component can create and destroy ORMJS populated elements.</p>
        <button onClick={clickHandler}>{button_text}</button>
    </div>
    )
}

function ORMJS_Model({grandparent}) {

    if(typeof ormjs === "undefined") return (<></>)

    // Create parent
    var orm_app = document.getElementById(grandparent);
    var parentID = `${grandparent}-ormjs`;
    var parent = orm_app.appendChild(document.createElement('div'));
    parent.setAttribute("id", parentID);
    parent.setAttribute("class", "ormjsParent");

    // Create model
    var model = new ormjs.Model();
    model.generate_rel = true;
    model.rel_target = "rel";
    var view = new ormjs.View({model: model.id, parent: parentID});
    view.scale_event_listener("svgscale-ormjs");
    var entity = new ormjs.Entity({x: 0, y: 0, view: view.id});
    setTimeout(() => { 
        var pred = new ormjs.Predicate({x: 150, y: 0, view: view.id});
        var rboxID = pred.d3object.datum().boxes[0];
        ormjs.Connector.connect_by_id(entity.id, rboxID);
    }, 3000);

    return (<></>)
}
